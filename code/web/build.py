#!/usr/bin/python
# Compresses the core Blockly files into a single JavaScript file.
#
# Copyright 2012 Google Inc.
# http://blockly.googlecode.com/
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script generates two files:
#   demos/blockly_compressed.js
#   demos/blockly_uncompressed.js
# The compressed file is a concatenation of all of Blockly's core files which
# have been run through Google's Closure Compiler.  This is done using the
# online API (which takes a few seconds and requires an Internet connection).
# The uncompressed file is a script that loads in each of Blockly's core files
# one by one.  This takes much longer for a browser to load, but may be useful
# when debugging code since line numbers are meaningful and variables haven't
# been renamed.  The oncompressed file also allows for a faster developement
# cycle since there is no need to rebuild or recompile, just reload.

import http, json, urllib, sys

from http import client

filenames = [
    'core/blockly.js',
    'core/block.js',
    'core/block_svg.js',
    'core/bubble.js',
    'core/comment.js',
    'core/connection.js',
    'core/contextmenu.js',
    'core/field.js',
    'core/field_dropdown.js',
    'core/field_checkbox.js',
    'core/field_colour.js',
    'core/field_image.js',
    'core/field_label.js',
    'core/field_textinput.js',
    'core/field_variable.js',
    'core/flyout.js',
    'core/generator.js',
    'core/inject.js',
    'core/input.js',
    'core/mutator.js',
    'core/names.js',
    'core/procedures.js',
    'core/scrollbar.js',
    'core/toolbox.js',
    'core/tooltip.js',
    'core/trashcan.js',
    'core/utils.js',
    'core/variables.js',
    'core/warning.js',
    'core/workspace.js',
    'core/xml.js',
    #start of non-core scripts
    #'generators/arduino.js',
    #'generators/arduino/control.js',
    #'generators/arduino/logic.js',
    #'generators/arduino/math.js',
    #'generators/arduino/text.js',
    #'generators/arduino/lists.js',
    #'generators/arduino/variables.js',##
    #'generators/arduino/procedures.js',
    #'language/en/_messages.js',
    #'language/common/control.js',
    #'language/common/logic.js',
    #'language/common/math.js',
    
    #'language/common/text.js',
    #'language/common/lists.js',
    #'language/common/procedures.js',
    #'generators/arduino/base.js',
    #'generators/arduino/grove.js',
    #'generators/arduino/3pi.js',
    #'generators/arduino/custom.js'
    ]
    
header = ('// Do not edit this file; automatically generated by build.py.\n'
          '"use strict";')

def gen_examples():
  target_filename = 'apps/blocklyduino/example_list.json'
  examples_folder = 'apps/blocklyduino/examples'
  

def gen_uncompressed():
  target_filename = 'apps/blocklyduino/blockly_uncompressed.js'
  inc = '''%s
document.write('<script type="text/javascript" src="closure-library/closure/goog/base.js"></script>');
(function() {
  var filenames = %s;
  for (var x = 0; x < filenames.length; x++) {
    document.write('<script type="text/javascript" src="' + filenames[x] + '"></script>');
  }
})();
''' % (header, filenames)

  f = open(target_filename, 'w')
  f.write(inc)
  f.close()
  print ('SUCCESS: ' + target_filename)

def gen_compressed():
  target_filename = 'apps/blocklyduino/blockly_compressed.js'
  # Define the parameters for the POST request.
  params = [
      #('compilation_level', 'WHITESPACE_ONLY'),
      ('compilation_level', 'SIMPLE_OPTIMIZATIONS'),
      #('compilation_level', 'ADVANCED_OPTIMIZATIONS'),
      ('language', 'ECMASCRIPT5'),
      #('formatting', 'pretty_print'),
      ('use_closure_library', 'true'),
      ('output_format', 'json'),
      ('output_info', 'compiled_code'),
      ('output_info', 'warnings'),
      ('output_info', 'errors'),
      ('output_info', 'statistics'),
    ]

  # Read in all the source files.
  for filename in filenames:
    f = open('apps/blocklyduino/' + filename)
    params.append(('js_code', ''.join(f.readlines())))
    f.close()
    


  # Send the request to Google.
  headers = { "Content-type": "application/x-www-form-urlencoded" }
  
  conn = http.client.HTTPConnection('closure-compiler.appspot.com')
  conn.request('POST', '/compile', urllib.parse.urlencode(params), headers)
  response = conn.getresponse()
  json_str = response.read().decode()
  conn.close

  # Parse the JSON response.
  json_data = json.loads(json_str)

  def file_lookup(name):
    if not name.startswith('Input_'):
      return '???'
    n = int(name[6:])
    return filenames[n]

  if "errors" in json_data:
    errors = json_data['errors']
    for error in errors:
      print ('FATAL ERROR')
      print (error['error'])
      print ('%s at line %d:' % (
          file_lookup(error['file']), error['lineno']))
      print (error['line'])
      print ((' ' * error['charno']) + '^')
  else:
    if "warnings" in json_data:
      warnings = json_data['warnings']
      for warning in warnings:
        try:
          print ('WARNING')
          print (warning['warning'])
          print ('%s at line %d:' % (
              file_lookup(warning['file']), warning['lineno']))
          print (warning['line'])
          print ((' ' * warning['charno']) + '^')
        except:
          pass
      print

    code = header + '\n' + json_data['compiledCode']

    stats = json_data['statistics']
    original_b = stats['originalSize']
    compressed_b = stats['compressedSize']
    if original_b > 0 and compressed_b > 0:
      f = open(target_filename, 'w')
      f.write(code)
      f.close()

      original_kb = int(original_b / 1024 + 0.5)
      compressed_kb = int(compressed_b / 1024 + 0.5)
      ratio = int(float(compressed_b) / float(original_b) * 100 + 0.5)
      print ('SUCCESS: ' + target_filename)
      print ('Size changed from %d KB to %d KB (%d%%).' % (
          original_kb, compressed_kb, ratio))
    else:
      print ('UNKNOWN ERROR')

if __name__ == '__main__':
  gen_examples()
  gen_uncompressed()
  gen_compressed()
